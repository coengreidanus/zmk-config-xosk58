/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&soft_off {
    hold-time-ms = <1000>; // Only turn off it the key is held for 1 seconds or longer.
};

/ {
    keymap {
        compatible = "zmk,keymap";

        HomeLayer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC    &kp N1          &kp N2          &kp N3              &kp N4            &kp N5                               &kp N6           &kp N7             &kp N8               &kp N9           &kp N0                   &kp BACKSPACE
&kp TAB    &kp Q           &kp W           &kp E               &kp R             &kp T                                &kp Y            &kp U              &kp I                &kp O            &kp P                    &kp BACKSLASH
&kp LCTRL  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G                                &kp H            &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt RIGHT_ALT L  &mt RIGHT_GUI SEMICOLON  &kp ENTER
&kp LSHFT  &kp Z           &kp X           &kp C               &kp V             &kp B        &kp LBKT   &kp RBKT     &kp N            &kp M              &kp COMMA            &kp DOT          &kp FSLH                 &kp RIGHT_SHIFT
                                           &kp LALT            &lt 1 ESCAPE      &lt 2 SPACE  &lt 3 TAB  &lt 4 ENTER  &lt 5 BACKSPACE  &lt 6 DEL          &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "Home";
        };

        MediaLayer {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans                         &trans            &trans             &trans           &trans      &trans  &trans
&trans  &kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &kp LG(T)                      &trans            &trans             &trans           &trans      &trans  &trans
&trans  &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)  &kp LG(G)                      &kp C_PREV        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &trans  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans  &trans      &trans            &kp C_BRI_DEC      &kp C_BRI_INC    &trans      &trans  &trans
                              &trans     &trans     &trans     &trans  &kp C_STOP  &kp C_PLAY_PAUSE  &kp C_MUTE         &trans
            >;

            label = "Media";
        };

        NavigationLayer {
            bindings = <
&trans    &kp LS(EXCL)  &kp LS(AT)        &kp LS(POUND)     &kp LS(DLLR)      &kp LS(PRCNT)                                   &kp LS(CARET)   &kp LS(AMPS)    &kp LS(STAR)  &kp LS(LPAR)     &kp LS(RPAR)  &trans
&trans    &trans        &kp LG(N7)        &kp LG(N8)        &kp LG(N9)        &kp LG(N0)                                      &kp K_COPY      &kp K_CUT       &kp K_UNDO    &kp K_REDO       &kp K_PASTE   &kp LS(PIPE)
&trans    &trans        &kp LG(NUMBER_4)  &kp LG(N5)        &kp LG(NUMBER_6)  &trans                                          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp CAPS      &kp LS(RET)
&kp CAPS  &trans        &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &trans         &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp HOME        &kp PG_DN       &kp PG_UP     &kp END          &kp INSERT    &trans
                                          &trans            &trans            &trans         &trans          &trans           &trans          &trans          &trans
            >;

            label = "Navigation";
        };

        MouseLayer {
            bindings = <
&trans  &trans  &trans                &trans                &trans                &trans                          &trans  &trans        &trans        &trans  &trans  &trans
&trans  &trans  &kp LG(LS(N7))        &kp LG(LS(N8))        &kp LG(LS(N9))        &kp LG(LS(N0))                  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &trans  &trans  &trans
&trans  &trans  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))        &kp LG(LS(NUMBER_6))  &trans                          &trans  &kp LS(LBRC)  &kp LS(RBRC)  &trans  &trans  &trans
&trans  &mo 7   &kp LG(LS(NUMBER_1))  &kp LG(LS(NUMBER_2))  &kp LG(LS(NUMBER_3))  &trans          &trans  &trans  &trans  &kp LBKT      &kp RBKT      &trans  &mo 7   &trans
                                      &trans                &trans                &trans          &trans  &trans  &trans  &trans        &trans
            >;

            label = "Mouse";
        };

        SymbolLayer {
            bindings = <
&trans  &trans  &trans        &trans         &trans         &trans                        &trans  &trans        &trans         &trans         &trans        &trans
&trans  &trans  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RPAR)                  &trans  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RPAR)  &trans
&trans  &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(LBRC)                  &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(LBRC)  &trans
&trans  &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(RBRC)  &trans  &trans  &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(RBRC)  &trans
                              &trans         &trans         &trans        &trans  &trans  &trans  &trans        &trans
            >;

            label = "Symbol";
        };

        NumberLayer {
            bindings = <
&trans  &trans     &trans  &trans   &trans  &trans                        &trans     &trans  &trans      &trans  &trans    &trans
&trans  &kp GRAVE  &kp N7  &kp N8   &kp N9  &kp N0                        &kp GRAVE  &kp N7  &kp N8      &kp N9  &kp N0    &trans
&trans  &kp MINUS  &kp N4  &kp N5   &kp N6  &kp LBKT                      &kp MINUS  &kp N4  &kp N5      &kp N6  &kp LBKT  &trans
&trans  &kp EQUAL  &kp N1  &kp N2   &kp N3  &kp RBKT  &trans    &trans    &kp EQUAL  &kp N1  &kp N2      &kp N3  &kp RBKT  &trans
                           &kp DOT  &kp N0  &kp SQT   &kp BSLH  &kp BSLH  &kp SQT    &trans  &kp PERIOD
            >;

            label = "Number";
        };

        FunctionLayer {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp PAUSE_BREAK                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans
            >;

            label = "Function";
        };

        BluetoothPowerLayer {
            bindings = <
&trans  &trans      &trans        &trans        &trans        &trans                      &trans      &trans        &trans        &trans        &trans      &trans
&trans  &sys_reset  &bootloader   &out OUT_BLE  &out OUT_USB  &soft_off                   &reset      &out OUT_USB  &out OUT_BLE  &bootloader   &sys_reset  &trans
&trans  &trans      &bt BT_SEL 4  &trans        &bt BT_SEL 4  &trans                      &trans      &bt BT_SEL 4  &trans        &bt BT_SEL 4  &trans      &trans
&trans  &trans      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  &trans  &trans  &bt BT_CLR  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &trans      &trans
                                  &trans        &trans        &trans      &trans  &trans  &trans      &trans        &trans
            >;

            label = "BluetoothPower";
        };

        LowerLayer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4                  &trans     &trans     &trans           &trans    &trans    &trans
&kp F1      &kp F2            &kp F3             &kp F4             &kp F5        &kp F6                        &kp F7     &kp F8     &kp F9           &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL          &kp AT             &kp HASH           &kp DOLLAR    &kp PRCNT                     &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans        &trans        &trans  &trans  &trans     &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC  &kp PIPE
                                                 &trans             &trans        &trans        &trans  &trans  &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                   &trans       &trans     &trans     &trans    &trans     &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                   &kp N6       &kp N7     &kp N8     &kp N9    &kp N0     &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                   &trans       &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
                           &trans   &trans   &trans   &trans  &trans  &trans       &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
